# This workflow is used to build the chain-db binary for all supported platforms.
# It is triggered by a release event.
# The binary is then uploaded as an asset to the release.

name: Build and Test

on:
  # push:
  #   branches: [ main ]
  release:
    types: [created]

# Add explicit permissions for the GITHUB_TOKEN
permissions:
  contents: write
  packages: write

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - run: cargo test --verbose

  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: chain-db
            asset_name: chain-db-linux-amd64
            use_cross: false
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: chain-db
            asset_name: chain-db-linux-arm64
            use_cross: true
          - os: ubuntu-latest
            target: armv7-unknown-linux-gnueabihf
            artifact_name: chain-db
            asset_name: chain-db-linux-armv7
            use_cross: true
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: chain-db.exe
            asset_name: chain-db-windows-amd64.exe
            use_cross: false
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: chain-db
            asset_name: chain-db-macos-amd64
            use_cross: false

    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      
      - name: Install cross
        if: matrix.use_cross
        run: cargo install cross
      
      - name: Build (standard)
        if: ${{ !matrix.use_cross }}
        run: cargo build --release --target ${{ matrix.target }}
      
      - name: Build (using cross)
        if: ${{ matrix.use_cross }}
        run: cross build --release --target ${{ matrix.target }}
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: target/${{ matrix.target }}/release/${{ matrix.artifact_name }} 
      
      - name: Rename binary for release
        run: |
          mkdir -p release-assets
          cp target/${{ matrix.target }}/release/${{ matrix.artifact_name }} release-assets/${{ matrix.asset_name }}
      
      - name: Upload Release Asset
        uses: softprops/action-gh-release@v1
        if: github.event_name == 'release'
        with:
          files: release-assets/${{ matrix.asset_name }}
          token: ${{ secrets.GITHUB_TOKEN }} 