use borsh_derive::{BorshDeserialize, BorshSerialize};
use chain_db_v2::{ChainDB, Table};
use serde::{Deserialize, Serialize};

#[derive(Debug, Serialize, Deserialize, BorshSerialize, BorshDeserialize, Clone)]
struct GreetingTable {
    greeting: String,
}

impl GreetingTable {
    fn new() -> Self {
        GreetingTable {
            greeting: String::from("Hi"),
        }
    }
}

#[tokio::main]
async fn main() -> Result<(), Box<dyn std::error::Error>> {
    // Example of how to use ChainDB
    let connection = ChainDB::connect("test_db", "root", "1234").unwrap();
    let db = &connection.db;

    // Use the table (get table data or use initial data)
    let mut greeting_table = db.get_table("greetings", GreetingTable::new).await.unwrap();

    // Update the data
    greeting_table.table.greeting = "updated greeting".to_string();

    // Update the last record
    greeting_table.update_data().await?;

    // Mutate the data again
    greeting_table.table.greeting = "new greeting".to_string();

    // Persist creating a new record
    greeting_table.persist_data().await?;

    println!("Example executed successfully!");
    Ok(())
}
